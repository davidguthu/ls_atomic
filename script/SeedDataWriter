#!/usr/bin/env ruby
#
# This is: script/generate_cities_seed_from_csv
#
require 'seed-fu'
require 'rubygems'
require 'csv'


def id_encode(string)
  output = ""
  string.each_byte {|b| output += b.to_s.rjust(3, "0") }
  return output.to_i % 314159265
end


CALC_COMPONENTS = File.join( File.dirname(__FILE__), '..', 'lib/tasks/DataFiles/Calculus/CalculusComponents.csv' )
CALC_COMPONENTS_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '02_calculus_components.rb' )
CALC_QUIZ = File.join( File.dirname(__FILE__), '..', 'lib/tasks/DataFiles/Calculus/CalculusExercises.csv' )
CALC_QUIZ_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '03_calculus_quizzes.rb')
CALC_ANSW_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '04_calculus_quiz_answers.rb')
CALC_LESSONS_INDEX = File.join( File.dirname(__FILE__), '..', 'lib/tasks/DataFiles/Calculus/CalculusLessonIndex.csv' )
CALC_LESSON_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '05_calculus_lessons.rb')
CALC_LESSON_EVENT_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '06_calculus_lesson_events.rb')
CALC_LESSON_NOTE_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '07_calculus_lesson_notes.rb')

PHYS_COMPONENTS = File.join( File.dirname(__FILE__), '..', 'lib/tasks/DataFiles/Physics/PhysicsComponents.csv' )
PHYS_COMPONENTS_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '03_physics_components.rb' )

# Create a seed_writer, walk the CSV, add to the file.
component_writer = SeedFu::Writer.new({:class_name => 'Component', :seed_by => [:id] })
lesson_writer = SeedFu::Writer.new({:class_name => 'Lesson', :seed_by => [:id] })
event_writer = SeedFu::Writer.new({:class_name => 'Event', :seed_by => [:id] })
note_writer = SeedFu::Writer.new({:class_name => 'Note', :seed_by => [:id] })
quiz_writer = SeedFu::Writer.new({:class_name => 'Quiz', :seed_by => [:id] })
answer_writer = SeedFu::Writer.new({:class_name => "Answer", :seed_by => [:quiz_id] })


# Exports Calculus Components
component_writer.write(CALC_COMPONENTS_OUT) do |writer|
  CSV.foreach(CALC_COMPONENTS, :return_headers => false, :headers => :first_row) do |row|
    writer.add({
      :id => id_encode("CalculusComponents-#{row['UniqueID']}"),
      :course_id => 2,
      :name => row['name'],
      :description => row['description']
    })
  end
end

# Exports Calculus Quizzes
quiz_writer.write(CALC_QUIZ_OUT) do |q_writer|
  answer_writer.write(CALC_ANSW_OUT) do |a_writer|
    CSV.foreach(CALC_QUIZ, :return_headers => false, :headers => :first_row) do |row|
      answer_tokens = (0..3).to_a.map { |a| row["choice_#{a}"] }.keep_if { |v| !v.nil? }
      component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("CalculusComponents-#{c}") }.join(",")
      quiz_id = id_encode("CalculusExercises-#{row['UniqueID']}")
      q_writer.add({
        :id => quiz_id, 
        :course_id => 2,
        :in_lesson => false,
        :question => row['question'],
        :answer_type => row['answer_type'],
        :answer_input => { :type => row['answer_type'], :choices => answer_tokens}.to_json,
        :answer_output => {:type => "text"}.to_json,
        :component_tokens => component_tokens
      })
      row['answer'].split("").each do |a|
        a_writer.add({ :quiz_id => quiz_id, :text => a })
      end 
    end
  end
end

# Exports Caclulus Lessons
lesson_writer.write(CALC_LESSON_OUT) do |l_writer|
  event_writer.write(CALC_LESSON_EVENT_OUT) do |e_writer|
    note_writer.write(CALC_LESSON_NOTE_OUT) do |n_writer|
      CSV.foreach(CALC_LESSONS_INDEX, :return_headers => false, :headers => :first_row) do |row|
        lesson_id = id_encode("CalculusLesson-#{row['UniqueID']}")
        component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("CalculusComponents-#{c}") }.join(",")
        l_writer.add({
          :id => lesson_id,
          :course_id => row['course_id'].to_i,
          :name => row['name'],
          :order_number => row['order_number'].to_i,
          :component_tokens => component_tokens 
        })

        lesson_root_path = File.join( File.dirname(__FILE__), '..', "lib/tasks/DataFiles/Calculus/Lessons/#{row['lesson_path']}")
        lesson_index_path = File.join( lesson_root_path, "index_#{row['lesson_path']}.csv")

        CSV.foreach(lesson_index_path, :return_headers => false, :headers => :first_row) do |l_row|
          contents = l_row['is_document'] == "TRUE" ? File.open(File.join(lesson_root_path, l_row['playable_path_trunk'] + l_row['playable_path_itr'].rjust(2,"0")) + ".txt", 'rb') { |ff| ff.read } : l_row['note_content']

          e_writer.add({
            :id => id_encode("CalculusEvent-#{row['UniqueID']*2}#{l_row['order_number']*2}"), 
            :lesson_id => lesson_id,
            :order_number => l_row['order_number'].to_i,
            :video_url => l_row['video_url'],
            :start_time => l_row['start_time'].to_i,
            :end_time => l_row['end_time'].to_i
          })

          n_writer.add({
            :id => id_encode("CalculusNote-#{row['UniqueID']*2}#{l_row['order_number']*2}"), 
            :content => contents,
            :is_document => l_row['is_document']
          })
        end
      end
    end
  end
end


=begin
# Exports Physics Components
component_writer.write(PHYS_COMPONENTS_OUT) do |writer|
  CSV.foreach( PHYS_COMPONENTS, :return_headers => false, :headers => :first_row) do |row|
    writer.add({
      :id => id_encode("PhysicsComponent-#{row['UniqueID']}"),
      :course_id => 1,
      :name => row['name'],
      :description => row['description']
    })
  end
end
=end



